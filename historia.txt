Resumen de GIT and git hub
    (Stiven Olano)

1: en Terminal bash: para inicar a crear un repositorio ==>
    git init

2.  Para conocer los archivos que no se han añadido =>
    git status

3. Para trackear / agregar archivos a repositorio debe utlizar =>
    git add <<Nombre del archivo>>

4. Para sacar archivos de repositorio =>
    git rm --cached <<Nombre del archivo>>

        'esto es para sacarlo de memoria ram y de ese estado de repositorio
        ' para agregarlo nuevamente se utiliza git add <<Nombre del archivo>>
5. Tener cuidado, no utilizar =>
    git rm -f <<Nombre del archivo>>

        'puede eliminarlo radicalmente

6. El archivo esta un limbo / en staged , para enviar los cambios al repositorio =>
    git commit -m << "mensaje para saber las verisones y cambios de los archivos" >>

6.1 primero debes configurar tu usuario para realizar el control de verisones =>
    git confi => lista de como funcionan las configuraciones de git
    git config --list => puedes ver la configuración por defecto del tu git (user)
    git congif --list--show--origin => configuracion para casos avanzados


7. primera prueba de cambios se cambiará el titulo y se agregará el nombre
    git add <<Nombre del archivo>>
    'siempre se debe hacer git add <<Nombre del archivo>>
    'para acutalizar versión
    git commit << "mensaje para saber las verisones y cambios de los archivos" >>
        'para guardar la modificación

8. para ver las historias de verisones del archivo =>
    git log <<Nombre del archivo>>

9. para ver los cambios que han existido entre verisones =>
    git show <<Nombre del archivo>>
        'permite comparar los cambios del estado anterior y el actual

9.1 Vim para escribir texto =>
    Esc + i

9.2 forzar salida y guardado =>
    Esc + shift + Z Z

10. ver cambios de cada verisón =>
    git log <<Nombre del archivo>> 
        'Para tomar el código de la versión que queremos ver

    git diff <<Código de git log>> <<código de git a comparar>>
        'Es preferible poner primero el código más antiguo y luego el mas nuevo


Resumen:

    git init = > iniciar un repositorio
    git status = > Ver archivos que no se han añadido a repositorio y estado de los que están añadidos
    git add = > Para agregar archivo o cmabio al repositorio
    git commit -m = > para guadarlo en el control de versiones
    git log => para ver todas las verisones del archivo
    git show = > para ver cmabios del archivo reciente con el anterior
    git diff = > para comparar cambios entre versiones

Directorio              Staging         repositorio   (master)
________    =>     ____tracked___  =>  ___tracked____
git init            git add           git commit

11. Ramas =>

    master => por defecto cada commit es una versión nueva del archivo en master

    experimental (developmet) = > copias la versión actual o la que quieras de la rama master y allí sigues con tus commits

    bugfixing (hotfix) = > crear rama especial para realizar cambios y probarlos en la rama master conectando ambas ramas
        'esto se conoce como merge


    experimental y bugfixing se pueden conectar con la rama  master o head y crrear la versión final 

12.  Volver en el tiempo =>

    git reset <<código de git log>> hard
        'elimina todos los archivos anteriormente guardados hasta el actual el cual quedaría como head en (master)

    git reset <<código de git log>> sotf
        'Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging
         para aplicar las últimas actualizaciones a un nuevo commit.

    git checkout <<código de git log>> <<Nombre del archivo>>
        'la forma más segura de volver  al estado anterior de los archivos 
        ' para guardar el archivo y borrar los que se encuentran con un commit posterior solo se ejecuta el checkout
        y se realiza un commit
        'Para reestablecer el head (último archivo commiteado) se realiza git checkout master <<Nombre del archivo>>


         

