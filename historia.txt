Resumen de GIT and git hub
    (Stiven Olano)

1: en Terminal bash: para inicar a crear un repositorio ==>
    git init

2.  Para conocer los archivos que no se han añadido =>
    git status

3. Para trackear / agregar archivos a repositorio debe utlizar =>
    git add <<Nombre del archivo>>

4. Para sacar archivos de repositorio =>
    git rm --cached <<Nombre del archivo>>

        'esto es para sacarlo de memoria ram y de ese estado de repositorio
        ' para agregarlo nuevamente se utiliza git add <<Nombre del archivo>>
5. Tener cuidado, no utilizar =>
    git rm -f <<Nombre del archivo>>

        'puede eliminarlo radicalmente

6. El archivo esta un limbo / en staged , para enviar los cambios al repositorio =>
    git commit -m << "mensaje para saber las verisones y cambios de los archivos" >>

6.1 primero debes configurar tu usuario para realizar el control de verisones =>
    git confi => lista de como funcionan las configuraciones de git
    git config --list => puedes ver la configuración por defecto del tu git (user)
    git congif --list--show--origin => configuracion para casos avanzados


7. primera prueba de cambios se cambiará el titulo y se agregará el nombre
    git add <<Nombre del archivo>>
    'siempre se debe hacer git add <<Nombre del archivo>>
    'para acutalizar versión
    git commit << "mensaje para saber las verisones y cambios de los archivos" >>
        'para guardar la modificación

8. para ver las historias de verisones del archivo =>
    git log <<Nombre del archivo>>

9. para ver los cambios que han existido entre verisones =>
    git show <<Nombre del archivo>>
        'permite comparar los cambios del estado anterior y el actual

9.1 Vim para escribir texto =>
    Esc + i

9.2 forzar salida y guardado =>
    Esc + shift + Z Z

10. ver cambios de cada verisón =>
    git log <<Nombre del archivo>> 
        'Para tomar el código de la versión que queremos ver

    git diff <<Código de git log>> <<código de git a comparar>>
        'Es preferible poner primero el código más antiguo y luego el mas nuevo


Resumen:

    git init = > iniciar un repositorio
    git status = > Ver archivos que no se han añadido a repositorio y estado de los que están añadidos
    git add = > Para agregar archivo o cmabio al repositorio
    git commit -m = > para guadarlo en el control de versiones
    git log => para ver todas las verisones del archivo
    git show = > para ver cambios del archivo reciente con el anterior
    git diff = > para comparar cambios entre versiones

Directorio              Staging         repositorio   (master)
________    =>     ____tracked___  =>  ___tracked____
git init            git add           git commit

11. Ramas =>

    master => por defecto cada commit es una versión nueva del archivo en master

    experimental (developmet) = > copias la versión actual o la que quieras de la rama master y allí sigues con tus commits

    bugfixing (hotfix) = > crear rama especial para realizar cambios y probarlos en la rama master conectando ambas ramas
        'esto se conoce como merge


    experimental y bugfixing se pueden conectar con la rama  master o head y crrear la versión final 

12.  Volver en el tiempo =>

    git reset <<código de git log>> hard
        'elimina todos los archivos anteriormente guardados hasta el actual el cual quedaría como head en (master)

    git reset <<código de git log>> sotf
        'Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging
         para aplicar las últimas actualizaciones a un nuevo commit.

    git checkout <<código de git log>> <<Nombre del archivo>>
        'la forma más segura de volver  al estado anterior de los archivos 
        ' para guardar el archivo y borrar los que se encuentran con un commit posterior solo se ejecuta el checkout
        y se realiza un commit
        'Para reestablecer el head (último archivo commiteado) se realiza git checkout master <<Nombre del archivo>>


         'esto es una prueba de checkout

          'versión de prueba exitosa  

Resumen.
    
    git rm <<Nombre del archivo>> --cached =>
        'elimina de Staging
        'elimina del seguimiento (repositorio)
        'permanece el archivo en disco duro

    git rm <<Nombre del archivo>> --forced =>
    ' elimina del Staging
    'elimina del repositorio
    'elimina del disco duro
        'Solo se puede recuperar con comandos avanzados

    git reset <<Nombre del archivo>> --soft =>
        'permanece en staging (versión cuando se realiza un git add pero faltando un git commit)
        'Elimina el historial/historiales posteriores de git
        
    git reset <<Nombre del archivo>> --hard =>
        'mismas condiciones que un rm --forced

    git reset <<Nombre del archivo>> --HEAD =>
        'solo elimina Staging

    git reset <<Nombre del archivo>> --mixed =>
        'igual que hard pero no lo elimina de disco duro

    Al trabajar en entornos colaborativos de GITHUB realizar estos cambios puede interferir en la _
    sincronización de los commits 

GIT HUB ======>>>>>

    Git clone url =>
        'Para enviar una copia de mi entorno de desarrollo personal _
        al entorno colaborativos

    Git push =>
        Cuando quiero enviar el master de mi entorno de desarrollo personal al entorno colaborativo

    Git fetch = >
        'Traer las actualziaciones o cambios que alguien más del entorno colaborativo realizo a _
        mi entorno personal        

    Git merge =>
        'para copiar en mi entorno lo que traje del git fetch y lo fusione con mi versión

    Git pull =>
        'Realiza al mismo tiempo git fetch git merge

    Git commit -am <<mensaje / descripción del cambio>>
        'no tendría que hacer un git add previo


13. RAMAS =====>>>>

        Git branch <<Nombre de la rama>>
            ' Crea una rama nueva además de master y se puede trabajar desde la rama sin hacer cambios en master y viceversa

        Git checkout <<Nombre de la rama o master>> 
            'Sin el nombre del archivo
            'permite moverse entre ramas y master para editar de manera indepentiente

        Git merge <<Nombre de la rama>> -m "Descripción"
            'Crea un commit en el que combina los últimos commits de ambas ramas
            'Si mi HEAD está en Master trae la información de la otra rama y la añade al último commit de master


                <<Esta es la cabecera>>
                <<Para salir sin ctrl + c o ctrl + Z en líneas de lectura en la termianl solo se apreta la tecla "Q" de Quit>>
                <<Esta es una nueva cabecera con BRANCH>>


        Resumen 2:

    git init = > iniciar un repositorio
    git status = > Ver archivos que no se han añadido a repositorio y estado de los que están añadidos
    git add = > Para agregar archivo o cmabio al repositorio
    git commit -m = > para guadarlo en el control de versiones
    git log => para ver todas las verisones del archivo
    git show = > para ver cambios del archivo reciente con el anterior
    git diff = > para comparar cambios entre versiones
    git rm = > Para eliminar archivos (cached /forced)
    git reset = > Para borrar archivos o historiales (soft/hard/mixed)
    git checkout = > Para moverse entre ramas o entre versiones y volver a versiones anteriores 
    git branch = > Para crear y ver ramas
    git merge = > Para fusionar ramas sea entorno personal o colaborativo


14. Resolviendo conflictos merge
        git merge ===> conflict
            
            'arreglo el conflicto directamente desde VS code
            '***Se debe hacer add y commit nuevamente sobre el cambio que quiero conservar y no se necesita _ 
            realizar nuevamente merge 
    Resolución de Conflicto con master

15. Llaves públicas y privadas

    ***LAS LLAVES NO SON POR PROYECTO SINO POR PERSONA ***

    Cambio de correo en git
        git config --global user.email "escribir email"

       1. ssh-keygen ===> comando para la Llaves
            'Siempre estar en virgulilla o home

        ssh-keygen -t rsa -b 4096 -C "correo"
            -t ===> especificar el algoritmo que se utilizará
            rsa ===> algoritmo para la Llave
            -b ===>  especificar complejidad de la Llave
            4096 ===> complejidad matematica
            -C ===> correo electronico
            "correo electronico  

       2. Solicitud de passphrase ===> contraseña permitiendo espacios
            Opcional
            Miphassphrase ===> stivenolano

            huella: SHA256:mQ0DH1ujH63YCk3dQe5/lLLwizxlGOLSzgkm4tmrJKs

            The key's randomart image is:
                                +---[RSA 4096]----+
                                |      . . o.o    |
                                |       o * = .   |
                                |        B o +    |
                                |       o @ =    .|
                                |      . S *.+. ..|
                                |   . . = + .o+o. |
                                | ...+ o * . oo. .|
                                |  +o .   +... .. |
                                |E. ....    o..   |
                                +----[SHA256]-----+
        
        
        3. revisar servidor de llaves encendido:

            eval $(ssh -agent -s)
                Evalua que un comando se dispare

            arroja ===> agent pid número asignado
                agent indica que el servidor del ssh está corriendo
                pid = indetificador del proceso y asigna número

        4. Agregar la llave privada que acabamos de crear y que nunca debemos mostrar

            ssh-add "agregar la ruta donde está la llave"

            ssh-add ~/stivenolano
                solicita passphrase y lsito, identidad añadida
                